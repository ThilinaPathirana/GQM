import { TradeResponse } from './trade-response';
export enum TradeResponseTypes {
  string = 1,
  number,
  boolean,
  map,
  array,
  json,
  verThreeHeaderArray,
  verThreeDataArray,
  verThreeDataString,
}

export const tradeResponseTags = {
  // Header
  CHNL_ID: { tag: 'channelId', type: TradeResponseTypes.number },
  CL_IP: { tag: 'clientIp' },
  CL_REQ_ID: { tag: 'clientRequestId' },
  CL_VER: { tag: 'clientVersion' },
  COMPRSSN: { tag: 'compressionType', type: TradeResponseTypes.number },
  ERR_CODE: { tag: 'errorCode', type: TradeResponseTypes.number },
  LANG_ID: { tag: 'languageId' },
  MSG_GRP: { tag: 'messageGroup', type: TradeResponseTypes.number },
  MSG_TYP: { tag: 'messageType', type: TradeResponseTypes.number },
  RES_STS: { tag: 'responseStatus', type: TradeResponseTypes.number },
  RES_REASN: { tag: 'rejectReason' },
  SESN_ID: { tag: 'sessionId' },
  UNQ_REQ_ID: { tag: 'uniqueRequestId' },
  USR_ID: { tag: 'userId' },
  VER: { tag: 'version' },

  // Authentication
  AGD_SL_TP: { tag: 'agreedToStopLossTakeProfit', type: TradeResponseTypes.number },
  AUTH_STS: { tag: 'authStatus', type: TradeResponseTypes.number },
  BRK_ID: { tag: 'brokerId' },
  BRK_INST_ID: { tag: 'brokerInstitutionId' },
  CALL_CENT_NUM: { tag: 'callCenterNumber' },
  CBO_ENBL: { tag: 'cboEnabled', type: TradeResponseTypes.number },
  CLNT_VER_MAP: { tag: 'clientVersionMap', type: TradeResponseTypes.map },
  CL_ACC_TYPE: { tag: 'clientAccountType', type: TradeResponseTypes.number },
  CNTRY_CODE: { tag: 'countryCode' },
  CUS_NME: { tag: 'customerName' },
  DLR_TYPE: { tag: 'dealerType', type: TradeResponseTypes.number },
  ENC_SEC_TKN: { tag: 'encryptedSecurityToken' },
  NATIVE_CHANNEL: { tag: 'nativeCommunicationChannel' },
  FAIL_ATMPS: { tag: 'failAttempts', type: TradeResponseTypes.number },
  GTN_SP_CUS: { tag: 'gtnSpecialCustomer', type: TradeResponseTypes.number },
  INST_ID: { tag: 'institutionId' },
  INST_NUM: { tag: 'institutionNumber', type: TradeResponseTypes.number },
  IOM_ARG_STS: { tag: 'internalOrderMatchingAgreementStatus', type: TradeResponseTypes.number },
  L2_AUTH_TYP: { tag: 'level2AuthType', type: TradeResponseTypes.number },
  L2_AUTH_STS: { tag: 'level2AuthStatus', type: TradeResponseTypes.number },
  LGN_ALS: { tag: 'loginAlias' },
  LGN_EXP_DTE: { tag: 'loginPasswordExpiryDate' },
  LST_LGN_TME: { tag: 'lastLoginTime' },
  MINI_CUS: { tag: 'miniOmsCustomer', type: TradeResponseTypes.number },
  PKG_ID: { tag: 'subscriptionPackageId' },
  PORTFLS: { tag: 'portfolioList', type: TradeResponseTypes.array },
  AVAIL_QTY_FOR_SELL: { tag: 'availableQtyForSell', type: TradeResponseTypes.number },
  TRAD_ACC_LST: { tag: 'tradeAccountList', type: TradeResponseTypes.array },
  PRC_USR: { tag: 'priceUserName' },
  PREF_LANG: { tag: 'languagePreference' },
  PROF_CAT: { tag: 'professionalCategory', type: TradeResponseTypes.number },
  REJ_RESN: { tag: 'rejectReason' },
  RM_ID: { tag: 'rmId' },
  RPT_URL: { tag: 'reportUrl' },
  SL_LMT: { tag: 'stopLossLimit', type: TradeResponseTypes.number },
  SRVR_TME: { tag: 'serverTime' },
  TP_LMT: { tag: 'takeProfitLimit', type: TradeResponseTypes.number },
  TRD_WIN_MAP: { tag: 'tradingWindowTypes' ,  type: TradeResponseTypes.map },
  TW_MNU: { tag: 'tawasulMenuEnable', type: TradeResponseTypes.number },
  LC_REQ: { tag: 'lowerCaseRequired', type: TradeResponseTypes.boolean },
  UC_REQ: { tag: 'upperCaseRequired', type: TradeResponseTypes.boolean },
  NUM_REQ: { tag: 'numericRequired', type: TradeResponseTypes.boolean },
  SPCL_REQ: { tag: 'specialCharRequired', type: TradeResponseTypes.boolean },
  PW_MIN_LNGTH: { tag: 'passwordMinLen', type: TradeResponseTypes.number },
  CHG_PWD_STS: { tag: 'changePasswordStatus', type: TradeResponseTypes.number },
  CHG_PWD_MSG: { tag: 'changePasswordMessage' },
  CNT_DSP: { tag: 'contentDisplayFlag' },
  PIN_VLD_STS: { tag: 'pinValidationStatus', type: TradeResponseTypes.number },
  OTP_DLY: { tag: 'otpDelay', type: TradeResponseTypes.number },
  AG_TW_SER: { tag: 'agreementSignStatus', type: TradeResponseTypes.number },
  IS_DEFLT: { tag: 'isDefault' },
};
